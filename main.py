# -*- coding: utf-8 -*-
"""Conversational AI with Langchain+Gemini_new.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T6sCF6JlF4f0hVgmPYgYWLsTCc5PspAN
"""

!pip install python-dotenv
!pip install -q langchain-google-genai
!pip install --upgrade -q langchain-google-genai
!pip show langchain-google-genai
!pip install google-ai-generativelanguage>=0.6.18,<0.7.0
!pip install langchain-community


# Install dependencies (to be run separately, not in production code)
import os
from dotenv import load_dotenv
from langchain import LLMChain
from langchain.prompts import ChatPromptTemplate, HumanMessagePromptTemplate, MessagesPlaceholder
from langchain.memory import ConversationSummaryMemory
from langchain_google_genai import ChatGoogleGenerativeAI

def load_api_key():
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise EnvironmentError("GOOGLE_API_KEY not found in environment variables.")
    return api_key

def build_conversational_chain():
    llm = ChatGoogleGenerativeAI(
        model='gemini-1.5-flash',
        temperature=0.9,
        verbose=True
    )

    memory = ConversationSummaryMemory(
        memory_key="messages",
        return_messages=True,
        llm=llm
    )

    prompt = ChatPromptTemplate.from_messages([
        MessagesPlaceholder(variable_name="messages"),
        HumanMessagePromptTemplate.from_template("{content}")
    ])

    return LLMChain(
        llm=llm,
        prompt=prompt,
        memory=memory,
        verbose=True
    )

def main():
    try:
        load_api_key()
        chain = build_conversational_chain()

        print("Conversational AI is ready. Type 'exit' to quit.")
        while True:
            content = input(">> ")
            if content.lower() in {"exit", "quit"}:
                print("Session ended.")
                break

            result = chain.invoke({"content": content})
            print(result["text"])

    except Exception as e:
        print(f"Something went wrong: {e}")

if __name__ == "__main__":
    main()
